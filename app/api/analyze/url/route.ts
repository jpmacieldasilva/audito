import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';
import puppeteer from 'puppeteer-core';
import chromium from '@sparticuz/chromium';

// Inicializa cliente OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Configura√ß√µes
const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB

// Fun√ß√£o para verificar se √© URL de imagem direta
function isDirectImageUrl(url: string): boolean {
  try {
    const urlLower = url.toLowerCase();
    const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.bmp', '.svg'];
    return imageExtensions.some(ext => urlLower.endsWith(ext));
  } catch {
    return false;
  }
}

// Fun√ß√£o para verificar se √© URL v√°lida
function isValidUrl(url: string): boolean {
  try {
    if (!url.startsWith('http://') && !url.startsWith('https://')) {
      return false;
    }
    
    // URLs bloqueadas
    const blockedPatterns = ['localhost', '127.0.0.1', '0.0.0.0', 'file://', 'ftp://'];
    const urlLower = url.toLowerCase();
    return !blockedPatterns.some(pattern => urlLower.includes(pattern));
  } catch {
    return false;
  }
}

// Fun√ß√£o para capturar imagem de URL
async function captureImageFromUrl(url: string): Promise<{ success: boolean; data?: ArrayBuffer; error?: string }> {
  try {
    const response = await fetch(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });

    if (!response.ok) {
      return { success: false, error: `Erro ao acessar URL: ${response.status}` };
    }

    const contentType = response.headers.get('content-type');
    if (!contentType?.startsWith('image/')) {
      return { success: false, error: 'URL n√£o retorna uma imagem v√°lida' };
    }

    const arrayBuffer = await response.arrayBuffer();
    
    if (arrayBuffer.byteLength > MAX_FILE_SIZE) {
      return { success: false, error: `Imagem muito grande. M√°ximo permitido: ${MAX_FILE_SIZE / (1024 * 1024)}MB` };
    }

    return { success: true, data: arrayBuffer };
  } catch (error) {
    return { success: false, error: `Erro ao capturar imagem: ${error}` };
  }
}

// Fun√ß√£o para capturar screenshot de p√°gina web usando Puppeteer
async function captureWebsiteScreenshot(url: string): Promise<{ success: boolean; data?: ArrayBuffer; error?: string }> {
  let browser;
  
  try {
    console.log('üîÑ Iniciando Puppeteer para capturar screenshot...');
    
    // Detecta o ambiente
    const isVercel = process.env.VERCEL === '1';
    const isLocal = process.env.NODE_ENV === 'development';
    
    // Configura√ß√£o base do Puppeteer
    const puppeteerOptions: any = {
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-accelerated-2d-canvas',
        '--no-first-run',
        '--no-zygote',
        '--disable-gpu',
        '--single-process',
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor',
        '--disable-background-timer-throttling',
        '--disable-backgrounding-occluded-windows',
        '--disable-renderer-backgrounding'
      ]
    };

    if (isVercel) {
      // No Vercel, usa o @sparticuz/chromium
      console.log('üåê Configurando para ambiente Vercel...');
      puppeteerOptions.executablePath = await chromium.executablePath();
      puppeteerOptions.args = [...puppeteerOptions.args, ...chromium.args];
    } else if (isLocal) {
      // Em desenvolvimento local, usa o Chrome do sistema
      console.log('üíª Configurando para ambiente local...');
      puppeteerOptions.executablePath = process.platform === 'darwin' 
        ? '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'
        : process.platform === 'win32'
        ? 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe'
        : '/usr/bin/google-chrome';
    } else {
      return { 
        success: false, 
        error: 'Ambiente n√£o suportado para captura de screenshots' 
      };
    }

    browser = await puppeteer.launch(puppeteerOptions);

    const page = await browser.newPage();
    
    // Configura viewport para desktop
    await page.setViewport({ width: 1920, height: 1080 });
    
    // Configura user agent
    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
    
    // Navega para a p√°gina com timeout de 30 segundos
    console.log(`üîÑ Navegando para: ${url}`);
    await page.goto(url, { 
      waitUntil: 'domcontentloaded', 
      timeout: 30000 
    });
    
    // Aguarda um pouco para o conte√∫do carregar
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // Captura screenshot em formato PNG
    console.log('üì∏ Capturando screenshot...');
    const screenshotBuffer = await page.screenshot({
      type: 'png',
      fullPage: true
    });
    
    // Converte para ArrayBuffer
    const arrayBuffer = screenshotBuffer.buffer.slice(
      screenshotBuffer.byteOffset,
      screenshotBuffer.byteOffset + screenshotBuffer.byteLength
    );
    
    // Verifica tamanho da imagem
    if (arrayBuffer.byteLength > MAX_FILE_SIZE) {
      return { success: false, error: `Screenshot muito grande. M√°ximo permitido: ${MAX_FILE_SIZE / (1024 * 1024)}MB` };
    }
    
    console.log(`‚úÖ Screenshot capturado com sucesso: ${arrayBuffer.byteLength} bytes`);
    return { success: true, data: arrayBuffer };
    
  } catch (error) {
    console.error('‚ùå Erro ao capturar screenshot:', error);
    return { success: false, error: `Erro ao capturar screenshot: ${error}` };
  } finally {
    if (browser) {
      try {
        await browser.close();
        console.log('üîí Browser fechado');
      } catch (error) {
        console.error('Erro ao fechar browser:', error);
      }
    }
  }
}

// Fun√ß√£o para criar prompt de an√°lise
function createAnalysisPrompt(productContext: string): string {
  const systemContext = productContext || "interface de usu√°rio";
  
  return `Act as a Senior Product Designer with extensive experience in usability and interface design for ${systemContext}.
Your task is to provide a critical and constructive analysis of the provided screen. The goal is to identify strengths and weaknesses, always focusing on improving user experience and product efficiency.

Please structure your analysis under the following topics:

**User Context and Primary Objective:**
Based on the interface, describe what you believe is the user's main objective on this screen and in what context they would be using it.

**Improvement Opportunities (Detailed Critique):**
Identify three areas that could be enhanced. For each, organize your critique strictly using the following format: Problem-Impact-Suggestion:

**Problem:** Objectively describe the design or usability issue.

**Impact:** Explain why this is a problem for the user (e.g., increases cognitive load, may lead to errors, disrupts visual hierarchy, lowers efficiency).

**Suggestion:** Provide one or more concrete, actionable solutions to address the identified issue.

**Formato de Resposta JSON:**
Forne√ßa sua an√°lise no seguinte formato JSON:

{
    "overall_assessment": "Breve avalia√ß√£o geral da interface",
    "user_context": "Descri√ß√£o do contexto do usu√°rio e objetivo principal",
    "recommendations": [
        {
            "id": "1",
            "title": "T√≠tulo da recomenda√ß√£o",
            "problem": "Descri√ß√£o objetiva do problema de design ou usabilidade",
            "impact": "Explica√ß√£o do impacto negativo para o usu√°rio",
            "suggestion": "Solu√ß√£o concreta e acion√°vel para resolver o problema",
            "category": "Usabilidade|Acessibilidade|Visual|Navega√ß√£o|Hierarquia"
        }
    ]
}

**Crit√©rios de Avalia√ß√£o:**
- Usabilidade: Facilidade de uso e compreens√£o
- Acessibilidade: Inclus√£o de usu√°rios com diferentes necessidades
- Visual: Hierarquia, contraste e organiza√ß√£o
- Navega√ß√£o: Clareza e intuitividade da interface
- Hierarquia: Estrutura visual e import√¢ncia dos elementos

Seja espec√≠fico, construtivo e focado em melhorias pr√°ticas. Analise como um designer experiente que quer criar a melhor experi√™ncia poss√≠vel para o usu√°rio.`;
}

// Fun√ß√£o para processar resposta do OpenAI
function processAnalysisResponse(content: string): any {
  try {
    // Tenta extrair JSON da resposta
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      const jsonStr = jsonMatch[0];
      return JSON.parse(jsonStr);
    } else {
      // Se n√£o encontrar JSON, cria resposta estruturada
      return {
        overall_assessment: "An√°lise realizada com sucesso",
        user_context: "Contexto do usu√°rio analisado",
        recommendations: [
          {
            id: "1",
            title: "An√°lise de Interface",
            problem: "Problema identificado na interface",
            impact: "Impacto na experi√™ncia do usu√°rio",
            suggestion: "Sugest√£o de melhoria",
            category: "Usabilidade"
          }
        ]
      };
    }
  } catch (error) {
    console.error('Erro ao processar resposta:', error);
    return {
      overall_assessment: "Erro na an√°lise",
      user_context: "Erro na an√°lise",
      recommendations: [
        {
          id: "error",
          title: "Erro na An√°lise",
          problem: "Ocorreu um erro durante a an√°lise",
          impact: "An√°lise n√£o p√¥de ser conclu√≠da",
          suggestion: "Tente novamente ou verifique a imagem fornecida",
          category: "Erro"
        }
      ]
    };
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { url, product_context: productContext = '' } = body;

    // Valida URL
    if (!url) {
      return NextResponse.json(
        { 
          success: false, 
          error: "URL √© obrigat√≥ria",
          overall_assessment: "Erro na valida√ß√£o",
          user_context: "Erro na valida√ß√£o",
          recommendations: []
        },
        { status: 400 }
      );
    }

    if (!isValidUrl(url)) {
      return NextResponse.json(
        { 
          success: false, 
          error: "URL inv√°lida ou n√£o suportada",
          overall_assessment: "Erro na valida√ß√£o",
          user_context: "Erro na valida√ß√£o",
          recommendations: []
        },
        { status: 400 }
      );
    }

    // Determina se √© URL de imagem direta ou p√°gina web
    let imageData: ArrayBuffer;
    let isWebPage = false;

    if (isDirectImageUrl(url)) {
      // Captura imagem diretamente da URL
      const result = await captureImageFromUrl(url);
      if (!result.success) {
        return NextResponse.json(
          { 
            success: false, 
            error: result.error,
            overall_assessment: "Erro na captura",
            user_context: "Erro na captura",
            recommendations: []
          },
          { status: 400 }
        );
      }
      imageData = result.data!;
    } else {
      // Captura screenshot da p√°gina web usando Puppeteer (apenas no Vercel)
      const result = await captureWebsiteScreenshot(url);
      if (!result.success) {
        return NextResponse.json(
          { 
            success: false, 
            error: result.error,
            overall_assessment: "Erro na captura",
            user_context: "Erro na captura",
            recommendations: []
          },
          { status: 400 }
        );
      }
      imageData = result.data!;
      isWebPage = true;
    }

    // Converte para base64
    const base64 = Buffer.from(imageData).toString('base64');
    
    // Cria prompt de an√°lise
    const prompt = createAnalysisPrompt(productContext);
    
    console.log(`üîÑ Enviando an√°lise para OpenAI com ${imageData.byteLength} bytes de imagem...`);

    // Chama OpenAI GPT-4 Vision
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "user",
          content: [
            {
              type: "text",
              text: prompt
            },
            {
              type: "image_url",
              image_url: {
                url: `data:image/jpeg;base64,${base64}`
              }
            }
          ]
        }
      ],
      response_format: { type: "json_object" },
      max_tokens: 2000
    });

    console.log("‚úÖ An√°lise do OpenAI conclu√≠da com sucesso");

    // Processa resposta
    const content = response.choices[0].message.content;
    const analysisResult = processAnalysisResponse(content || '{}');

    // Adiciona informa√ß√µes da imagem
    const imageInfo = {
      format: "image/png",
      size: imageData.byteLength,
      width: 0, // Seria necess√°rio processar a imagem para obter dimens√µes
      height: 0,
      file_size: imageData.byteLength
    };

    // Formata resposta final
    const formattedResult: any = {
      success: true,
      overall_assessment: analysisResult.overall_assessment || "An√°lise conclu√≠da",
      user_context: analysisResult.user_context || productContext || "Contexto n√£o especificado",
      recommendations: analysisResult.recommendations || [],
      image_info: imageInfo,
      source_url: url,
      analysis_timestamp: Date.now()
    };

    // Para p√°ginas web, adiciona screenshot como base64
    if (isWebPage) {
      formattedResult.screenshot_data = `data:image/png;base64,${base64}`;
    }

    return NextResponse.json(formattedResult);

  } catch (error) {
    console.error('‚ùå Erro na an√°lise:', error);
    
    return NextResponse.json(
      {
        success: false,
        error: error instanceof Error ? error.message : 'Erro desconhecido',
        overall_assessment: "Erro na an√°lise",
        user_context: "Erro na an√°lise",
        recommendations: []
      },
      { status: 500 }
    );
  }
}
