import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';

// Inicializa cliente OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Verifica se a API key est√° configurada
if (!process.env.OPENAI_API_KEY) {
  console.error('‚ùå OPENAI_API_KEY n√£o est√° configurada no arquivo .env.local');
}

// Configura√ß√µes
const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
const ALLOWED_EXTENSIONS = ['.png', '.jpg', '.jpeg'];

// Fun√ß√£o para validar arquivo
function validateFile(file: File): { isValid: boolean; error?: string; errorType?: 'error' | 'warning' | 'info' } {
  // Verifica tamanho
  if (file.size > MAX_FILE_SIZE) {
    return { 
      isValid: false, 
      error: `Arquivo muito grande. M√°ximo permitido: ${MAX_FILE_SIZE / (1024 * 1024)}MB`,
      errorType: 'warning'
    };
  }

  // Verifica extens√£o
  const fileExtension = file.name.toLowerCase().split('.').pop();
  if (!fileExtension || !ALLOWED_EXTENSIONS.includes(`.${fileExtension}`)) {
    return { 
      isValid: false, 
      error: `Formato n√£o suportado. Use: ${ALLOWED_EXTENSIONS.join(', ')}`,
      errorType: 'error'
    };
  }

  // Verifica tipo MIME
  if (!file.type.startsWith('image/')) {
    return { 
      isValid: false, 
      error: 'Arquivo deve ser uma imagem v√°lida',
      errorType: 'error'
    };
  }

  return { isValid: true };
}

// Fun√ß√£o para otimizar imagem
async function optimizeImage(buffer: ArrayBuffer): Promise<ArrayBuffer> {
  // Para simplicidade, retornamos o buffer original
  // Em produ√ß√£o, voc√™ pode usar sharp ou outras bibliotecas para otimiza√ß√£o
  return buffer;
}

// Fun√ß√£o para criar prompt de an√°lise
function createAnalysisPrompt(productContext: string): string {
  const systemContext = productContext || "interface de usu√°rio";
  
  return `Act as a Senior Product Designer with extensive experience in usability and interface design for ${systemContext}.
Your task is to provide a critical and constructive analysis of the provided screen. The goal is to identify strengths and weaknesses, always focusing on improving user experience and product efficiency.

Please structure your analysis under the following topics:

**User Context and Primary Objective:**
Based on the interface, describe what you believe is the user's main objective on this screen and in what context they would be using it.

**Improvement Opportunities (Detailed Critique):**
Identify three areas that could be enhanced. For each, organize your critique strictly using the following format: Problem-Impact-Suggestion:

**Problem:** Objectively describe the design or usability issue.

**Impact:** Explain why this is a problem for the user (e.g., increases cognitive load, may lead to errors, disrupts visual hierarchy, lowers efficiency).

**Suggestion:** Provide one or more concrete, actionable solutions to address the identified issue.

**Formato de Resposta JSON:**
Forne√ßa sua an√°lise no seguinte formato JSON:

{
    "overall_assessment": "Breve avalia√ß√£o geral da interface",
    "user_context": "Descri√ß√£o do contexto do usu√°rio e objetivo principal",
    "recommendations": [
        {
            "id": "1",
            "title": "T√≠tulo da recomenda√ß√£o",
            "problem": "Descri√ß√£o objetiva do problema de design ou usabilidade",
            "impact": "Explica√ß√£o do impacto negativo para o usu√°rio",
            "suggestion": "Solu√ß√£o concreta e acion√°vel para resolver o problema",
            "category": "Usabilidade|Acessibilidade|Visual|Navega√ß√£o|Hierarquia"
        }
    ]
}

**Crit√©rios de Avalia√ß√£o:**
- Usabilidade: Facilidade de uso e compreens√£o
- Acessibilidade: Inclus√£o de usu√°rios com diferentes necessidades
- Visual: Hierarquia, contraste e organiza√ß√£o
- Navega√ß√£o: Clareza e intuitividade da interface
- Hierarquia: Estrutura visual e import√¢ncia dos elementos

Seja espec√≠fico, construtivo e focado em melhorias pr√°ticas. Analise como um designer experiente que quer criar a melhor experi√™ncia poss√≠vel para o usu√°rio.`;
}

// Fun√ß√£o para processar resposta do OpenAI
function processAnalysisResponse(content: string): any {
  try {
    // Tenta extrair JSON da resposta
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      const jsonStr = jsonMatch[0];
      return JSON.parse(jsonStr);
    } else {
      // Se n√£o encontrar JSON, cria resposta estruturada
      return {
        overall_assessment: "An√°lise realizada com sucesso",
        user_context: "Contexto do usu√°rio analisado",
        recommendations: [
          {
            id: "1",
            title: "An√°lise de Interface",
            problem: "Problema identificado na interface",
            impact: "Impacto na experi√™ncia do usu√°rio",
            suggestion: "Sugest√£o de melhoria",
            category: "Usabilidade"
          }
        ]
      };
    }
  } catch (error) {
    console.error('Erro ao processar resposta:', error);
    return {
      overall_assessment: "Erro na an√°lise",
      user_context: "Erro na an√°lise",
      recommendations: [
        {
          id: "error",
          title: "Erro na An√°lise",
          problem: "Ocorreu um erro durante a an√°lise",
          impact: "An√°lise n√£o p√¥de ser conclu√≠da",
          suggestion: "Tente novamente ou verifique a imagem fornecida",
          category: "Erro"
        }
      ]
    };
  }
}

export async function POST(request: NextRequest) {
  try {
    // Verifica se a API key est√° configurada
    if (!process.env.OPENAI_API_KEY) {
      return NextResponse.json(
        { 
          success: false, 
          error: 'OPENAI_API_KEY n√£o est√° configurada. Crie um arquivo .env.local com sua chave da API OpenAI.',
          error_type: 'error',
          overall_assessment: "Erro de configura√ß√£o",
          user_context: "Erro de configura√ß√£o",
          recommendations: []
        },
        { status: 500 }
      );
    }

    const formData = await request.formData();
    const file = formData.get('file') as File;
    const productContext = formData.get('product_context') as string || '';

    // Valida arquivo
    const validation = validateFile(file);
    if (!validation.isValid) {
      return NextResponse.json(
        { 
          success: false, 
          error: validation.error,
          error_type: validation.errorType || 'error',
          overall_assessment: "Erro na valida√ß√£o",
          user_context: "Erro na valida√ß√£o",
          recommendations: []
        },
        { status: 400 }
      );
    }

    // Converte arquivo para buffer
    const buffer = await file.arrayBuffer();
    
    // Otimiza imagem
    const optimizedBuffer = await optimizeImage(buffer);
    
    // Converte para base64
    const base64 = Buffer.from(optimizedBuffer).toString('base64');
    
    // Cria prompt de an√°lise
    const prompt = createAnalysisPrompt(productContext);
    
    console.log(`üîÑ Enviando an√°lise para OpenAI com ${optimizedBuffer.byteLength} bytes de imagem...`);

    // Chama OpenAI GPT-4 Vision
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "user",
          content: [
            {
              type: "text",
              text: prompt
            },
            {
              type: "image_url",
              image_url: {
                url: `data:image/jpeg;base64,${base64}`
              }
            }
          ]
        }
      ],
      response_format: { type: "json_object" },
      max_tokens: 2000
    });

    console.log("‚úÖ An√°lise do OpenAI conclu√≠da com sucesso");

    // Processa resposta
    const content = response.choices[0].message.content;
    const analysisResult = processAnalysisResponse(content || '{}');

    // Adiciona informa√ß√µes da imagem
    const imageInfo = {
      format: file.type,
      size: file.size,
      width: 0, // Seria necess√°rio processar a imagem para obter dimens√µes
      height: 0,
      file_size: file.size
    };

    // Formata resposta final
    const formattedResult = {
      success: true,
      overall_assessment: analysisResult.overall_assessment || "An√°lise conclu√≠da",
      user_context: analysisResult.user_context || productContext || "Contexto n√£o especificado",
      recommendations: analysisResult.recommendations || [],
      image_info: imageInfo,
      analysis_timestamp: Date.now()
    };

    return NextResponse.json(formattedResult);

  } catch (error) {
    console.error('‚ùå Erro na an√°lise:', error);
    
    // Melhora as mensagens de erro para serem mais claras
    let errorMessage = 'Erro desconhecido na an√°lise';
    let errorType = 'error';
    
    if (error instanceof Error) {
      const message = error.message;
      
      if (message.includes('API key') || message.includes('OPENAI')) {
        errorMessage = 'Erro de configura√ß√£o da API OpenAI. Verifique se a chave est√° configurada corretamente.';
        errorType = 'error';
      } else if (message.includes('quota') || message.includes('rate limit')) {
        errorMessage = 'Limite de uso da API excedido. Tente novamente mais tarde.';
        errorType = 'warning';
      } else if (message.includes('timeout') || message.includes('Timeout')) {
        errorMessage = 'A an√°lise demorou muito para ser conclu√≠da. Tente novamente.';
        errorType = 'warning';
      } else if (message.includes('network') || message.includes('fetch')) {
        errorMessage = 'Erro de conex√£o com a API. Verifique sua internet e tente novamente.';
        errorType = 'error';
      } else {
        errorMessage = `Erro na an√°lise: ${message}`;
        errorType = 'error';
      }
    }
    
    return NextResponse.json(
      {
        success: false,
        error: errorMessage,
        error_type: errorType,
        overall_assessment: "Erro na an√°lise",
        user_context: "Erro na an√°lise",
        recommendations: []
      },
      { status: 500 }
    );
  }
}
