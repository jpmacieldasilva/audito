import base64
import os
from typing import List, Dict, Any
from agno.agent import Agent
from ..core.config import settings

class AgnoClient:
    """Cliente para integra√ß√£o com Agno AI Agent"""
    
    def __init__(self):
        """Inicializa o cliente Agno"""
        self.agent = Agent()
        self.model = settings.AGNO_MODEL
        
    def analyze_image(self, image_data: bytes, product_context: str = "") -> Dict[str, Any]:
        """
        Analisa uma imagem usando o agente Agno
        
        Args:
            image_data: Dados da imagem em bytes
            product_context: Contexto opcional do produto
            
        Returns:
            Dicion√°rio com as recomenda√ß√µes de an√°lise
        """
        try:
            # Verifica se os dados da imagem s√£o v√°lidos
            if not image_data or len(image_data) == 0:
                return self._create_error_response("Dados da imagem inv√°lidos ou vazios")
            
            # Converte imagem para base64
            try:
                image_base64 = base64.b64encode(image_data).decode('utf-8')
            except Exception as e:
                print(f"‚ùå Erro ao converter imagem para base64: {e}")
                return self._create_error_response("Erro ao processar dados da imagem")
            
            # Cria o prompt estruturado para an√°lise de Product Designer
            analysis_prompt = self._create_analysis_prompt(product_context)
            
            print(f"üîÑ Enviando an√°lise para Agno com {len(image_data)} bytes de imagem...")
            
            # Executa an√°lise com Agno (sem await, pois n√£o √© ass√≠ncrono)
            response = self.agent.run(
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "text",
                                "text": analysis_prompt
                            },
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/jpeg;base64,{image_base64}"
                                }
                            }
                        ]
                    }
                ],
                model=self.model
            )
            
            print("‚úÖ An√°lise do Agno conclu√≠da com sucesso")
            
            # Processa e estrutura a resposta
            return self._process_analysis_response(response)
            
        except Exception as e:
            print(f"‚ùå Erro na an√°lise com Agno: {e}")
            return self._create_error_response(str(e))
    
    def _create_analysis_prompt(self, product_context: str) -> str:
        """Cria prompt estruturado para an√°lise de Product Designer"""
        
        system_context = product_context or "interface de usu√°rio"
        
        base_prompt = f"""Act as a Senior Product Designer with extensive experience in usability and interface design for {system_context}.
Your task is to provide a critical and constructive analysis of the provided screen. The goal is to identify strengths and weaknesses, always focusing on improving user experience and product efficiency.

Please structure your analysis under the following topics:

**User Context and Primary Objective:**
Based on the interface, describe what you believe is the user's main objective on this screen and in what context they would be using it.

**Improvement Opportunities (Detailed Critique):**
Identify three areas that could be enhanced. For each, organize your critique strictly using the following format: Problem-Impact-Suggestion:

**Problem:** Objectively describe the design or usability issue.

**Impact:** Explain why this is a problem for the user (e.g., increases cognitive load, may lead to errors, disrupts visual hierarchy, lowers efficiency).

**Suggestion:** Provide one or more concrete, actionable solutions to address the identified issue.

**Formato de Resposta JSON:**
Forne√ßa sua an√°lise no seguinte formato JSON:

{{
    "overall_assessment": "Breve avalia√ß√£o geral da interface",
    "user_context": "Descri√ß√£o do contexto do usu√°rio e objetivo principal",
    "recommendations": [
        {{
            "id": "1",
            "title": "T√≠tulo da recomenda√ß√£o",
            "problem": "Descri√ß√£o objetiva do problema de design ou usabilidade",
            "impact": "Explica√ß√£o do impacto negativo para o usu√°rio",
            "suggestion": "Solu√ß√£o concreta e acion√°vel para resolver o problema",
            "category": "Usabilidade|Acessibilidade|Visual|Navega√ß√£o|Hierarquia"
        }}
    ]
}}

**Crit√©rios de Avalia√ß√£o:**
- Usabilidade: Facilidade de uso e compreens√£o
- Acessibilidade: Inclus√£o de usu√°rios com diferentes necessidades
- Visual: Hierarquia, contraste e organiza√ß√£o
- Navega√ß√£o: Clareza e intuitividade da interface
- Hierarquia: Estrutura visual e import√¢ncia dos elementos

Seja espec√≠fico, construtivo e focado em melhorias pr√°ticas. Analise como um designer experiente que quer criar a melhor experi√™ncia poss√≠vel para o usu√°rio."""
        
        return base_prompt
    
    def _process_analysis_response(self, response: Any) -> Dict[str, Any]:
        """Processa e estrutura a resposta do Agno"""
        try:
            # Extrai o conte√∫do da resposta - Agno retorna diretamente o conte√∫do
            if hasattr(response, 'content'):
                content = response.content
            elif hasattr(response, 'choices') and len(response.choices) > 0:
                content = response.choices[0].message.content
            elif isinstance(response, str):
                content = response
            else:
                # Tenta acessar como atributo direto
                content = str(response)
            
            print(f"üìù Resposta do Agno recebida: {len(content)} caracteres")
            
            # Tenta extrair JSON da resposta
            import json
            import re
            
            # Procura por padr√µes JSON na resposta
            json_match = re.search(r'\{.*\}', content, re.DOTALL)
            if json_match:
                json_str = json_match.group()
                result = json.loads(json_str)
                print("‚úÖ JSON extra√≠do com sucesso da resposta")
                return result
            else:
                print("‚ö†Ô∏è  JSON n√£o encontrado na resposta, criando resposta estruturada")
                # Se n√£o encontrar JSON, cria resposta estruturada manualmente
                return self._create_structured_response(content)
                
        except Exception as e:
            print(f"‚ùå Erro ao processar resposta do Agno: {e}")
            return self._create_error_response("Erro ao processar an√°lise")
    
    def _create_structured_response(self, content: str) -> Dict[str, Any]:
        """Cria resposta estruturada quando n√£o h√° JSON v√°lido"""
        return {
            "overall_assessment": "An√°lise realizada com sucesso",
            "user_context": "Contexto do usu√°rio analisado",
            "recommendations": [
                {
                    "id": "1",
                    "title": "An√°lise de Interface",
                    "problem": "Problema identificado na interface",
                    "impact": "Impacto na experi√™ncia do usu√°rio",
                    "suggestion": "Sugest√£o de melhoria",
                    "category": "Usabilidade"
                }
            ]
        }
    
    def _create_error_response(self, error_message: str) -> Dict[str, Any]:
        """Cria resposta de erro estruturada"""
        return {
            "overall_assessment": "Erro na an√°lise",
            "user_context": "Erro na an√°lise",
            "recommendations": [
                {
                    "id": "error",
                    "title": "Erro na An√°lise",
                    "problem": f"Ocorreu um erro durante a an√°lise: {error_message}",
                    "impact": "An√°lise n√£o p√¥de ser conclu√≠da",
                    "suggestion": "Tente novamente ou verifique a imagem fornecida",
                    "category": "Erro"
                }
            ]
        }
